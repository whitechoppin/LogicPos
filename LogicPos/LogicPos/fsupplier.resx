<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnrefresh.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RU5ErkJggg==
</value>
  </data>
</root>